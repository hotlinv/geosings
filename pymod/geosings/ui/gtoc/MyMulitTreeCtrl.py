#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.3.5.1 on Thu Sep 21 10:04:11 2006
"""
定义可以加载控件的树控件
"""

import wx
class TreeItemPanel(wx.Panel):
    """作为树中的项的面板控件
    """
    def __init__(self, *args, **kwds):
        """初始化面板
        """
        if 'style' in kwds:
            kwds["style"] = kwds["style"]|wx.DOUBLE_BORDER  
        else:
            kwds["style"] = wx.DOUBLE_BORDER 
        wx.Panel.__init__(self,*args,**kwds)
        self.item = None
        self.idtree = []
        self.highlight = False
        self.backColor = self.GetBackgroundColour()
        self.Bind(wx.EVT_LEFT_DOWN,self.OnLeftDown)
        self.Bind(wx.EVT_MOTION,self.OnMotion)
        self.Bind(wx.EVT_LEFT_UP,self.OnLeftUp)
    def OnLeftUp(self,evt):
        """当鼠标左键松开的时候的响应
        @type evt: wxEvent
        @param evt: 鼠标事件
        """
        self.GetParent().OnChildLeftUp(self,evt)
    def OnMotion(self,evt):
        """鼠标移动的时候的响应
        @type evt: wxEvent
        @param evt: 鼠标事件
        """
        #print self.GetRect()
        self.GetParent().OnChildMotion(self,evt)
        pass
    def OnLeftDown(self,evt):
        """鼠标左键按下时的响应
        @type evt: wxEvent
        @param evt: 鼠标事件
        """
        self.GetParent().OnChildLeftDown(self,evt)
        pass
    def SetSelect(self,issel):
        """设置该面板的内容已选(非选)
        @type issel: bool
        @param issel: 要设置的面板选择与否
        """
        if issel:
            self.SetBackgroundColour(wx.Colour(160,170,250))
        else:
            self.SetBackgroundColour(self.backColor)
        self.Refresh()
        #self.highlight = not self.highlight
        self.highlight = issel
    #def Select(self,isSelected):
    #    """设置该面板的内容已选(非选)
    #    @type isSelected: bool
    #    @param isSelected: 要设置的面板选择与否
    #    """
    #    self.SetSelect(isSelected)
    #def IsHighLight(self):
    #    """判断该面板是否高亮
    #    @rtype: bool
    #    @return: 返回面板是否高亮
    #    """
    #    return self.highlight
    def IsSelected(self):
        """判断该面板是否被选择
        @rtype: bool
        @return: 返回面板是否被选择
        """
        return self.highlight

class CheckItem(TreeItemPanel):
    """图层列表的表项的基类,可进行可视不可视的选择
    """
    def __init__(self,parent, name, *args,**kwds):
        """初始化控件
        @type parent: wxCtrl
        @param parent: 父控件
        @type name: str
        @param name: 图层名称
        """
        TreeItemPanel.__init__(self,parent,*args,**kwds)
        self.sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.check = wx.CheckBox(self,-1,name)
        self.sizer.Add((40,40))
        self.sizer.Add(self.check,0,wx.EXPAND ,0)
        self.SetSizer(self.sizer)
        self.Layout()

class MyMTreePanel(wx.ScrolledWindow):
    """可以插入控件的树
    """
    initi = 0
    def __init__(self, *args, **kwds):
        """初始化控件
        """
        # begin wxGlade: MyPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.ScrolledWindow.__init__(self, *args, **kwds)
        self.rootItemText = wx.StaticText(self, -1, "root")
        self.panel_ex = wx.Panel(self, -1)
        self.panel_main = wx.Panel(self, -1)
        #self.panel_ex.SetBackgroundColour(wx.WHITE)
        self.idtree = []

        self.__set_properties()
        self.__do_layout()
        #self.SetTargetWindow(self.mainsizer)
        self.dragging = False
        self.downat = -1
        # end wxGlade
    def AddRoot(self,rootname):
        """添加根结点
        @type rootname: str
        @param rootname: 根结点的名称 
        """
        self.rootItemText.SetLabel(rootname)

    def OnChildLeftUp(self,child,evt):
        """在节点上左键松开时的相应
        @type child: wxCtrl
        @param child: 松开左键事件发起的子节点
        @type evt: wxEvent
        @param evt: 鼠标事件
        """
        upat = self._GetWhere(child)
        if not self.dragging or upat==self.downat: 
            self.Select(child.item,evt.ShiftDown())
        else:# is dragging
            self.MoveFromTo(self.downat,upat)

    def PopItem(self,i):
        """删除节点并返回
        @type i: int
        @param i: 要移除的节点的索引
        @rtype: wxCtrl
        @return: 移除的节点控件
        """
        item = self.idtree.pop(i)
        self.mainsizer.Detach(i+MyMTreePanel.initi)
        self.Layout()
        return item

    def RemoveAll(self):
        """移除所有节点
        """
        for i in range(len(self.idtree)):
            item = self.idtree.pop(0)
            self.mainsizer.Detach(MyMTreePanel.initi)
            item.values()[0].Destroy()# Must Destroy The Control
        self.Layout()

    def MoveFromTo(self,fromwhere,towhere):
        """把节点从一个位置移动到另一个位置
        @type fromwhere: int
        @param fromwhere: 把节点从什么位置移动
        @type towhere: int
        @param towhere: 把节点移动到什么位置
        """
        print fromwhere,"<=>",towhere
        item = self.idtree.pop(fromwhere)
        self.mainsizer.Detach(fromwhere+MyMTreePanel.initi)
        self.Insert(towhere,item.values()[0])
        self.Refresh()
        
    def GetSelections(self):
        """获取选择的节点的列表
        @rtype: list
        @return: 返回选择的节点索引列表
        """
        items = []
        for i in range(len(self.idtree)):
            if self.idtree[i].values()[0].IsSelected():
                items.append(i)
        return items

    #def __GetInsertPosition(self,child,evt):
    #    """获取插入的节点的位置
    #    @type child: wxCtrl
    #    @param child: 插入的节点的控件
    #    @type evt: wxEvent
    #    @param evt: 废弃
    #    @rtype: int
    #    @return: 返回插入所选位置
    #    """
    #    at = self._GetWhere(child)
    #    return at

    def _GetWhere(self,child):
        """获取节点的索引
        @type child: wxCtrl
        @param child: 获取节点位置的控件
        @rtype: int
        @return: 返回节点的位置
        """
        for i in range(len(self.idtree)):
            if child in self.idtree[i].values():
                return i
    
    def _GetWhereById(self,childid):
        """获取节点的索引
        @type child: wxId
        @param child: 获取节点位置的控件id
        @rtype: int
        @return: 返回节点的位置
        """
        for i in range(len(self.idtree)):
            if childid in self.idtree[i].keys():
                return i

    def OnChildLeftDown(self,child,evt):
        """在节点控件上左键按下时的相应函数
        @type child: wxCtrl
        @param child: 子控件
        @type evt: wxEvent
        @param evt: 鼠标事件
        """
        self.downat = self._GetWhere(child)

    def OnChildMotion(self,child,evt):
        """在节点控件上掠过时的相应函数
        @type child: wxCtrl
        @param child: 子控件
        @type evt: wxEvent
        @param evt: 鼠标事件
        """
        if evt.Dragging() :
            if not self.dragging:
                self.dragging = True
        if evt.Moving():
            self.dragging = False

    def Select(self,item,ShiftDown=False):
        """选择某个节点
        @type item: id
        @param item: 选择某个控件的id
        @type ShiftDown: bool
        @param ShiftDown: Shift键是否按下(有按Shift，则多选)
        """
        if not ShiftDown :
            for i in self.idtree:
                i.values()[0].SetSelect(False)
            obj = self.__GetChild(item)
            if obj is not None:
                obj.SetSelect(True)
        else:
            obj = self.__GetChild(item)
            if obj is not None:
                if obj.IsSelected():
                    obj.SetSelect(False)
                else:
                    obj.SetSelect(True)

    def __GetChild(self,item):
        """获取子控件
        @type item: id
        @param item: 子控件的id
        @rtype: wxCtrl
        @return: 子控件
        """
        for id in self.idtree:
            if item in id:
                return id[item]
        return None

    def Insert(self,where,ctrl):
        """插入一个子控件
        @type where: int
        @param where: 子控件插入的位置
        @type ctrl: wxCtrl
        @param ctrl: 要插入的子控件
        @rtype: id
        @return: 插入的子控件的id
        """
        ctrl.item = self.mainsizer.Insert(where+MyMTreePanel.initi,ctrl,0,wx.EXPAND,0)
        self.idtree.insert(where,{ctrl.item:ctrl})
        self.Layout()
        return ctrl.item

    def __set_properties(self):
        """设置主控件属性
        """
        self.SetScrollRate(10, 10)

    def __do_layout(self):
        """设置主控件的格局
        """
        self.mainsizer = wx.BoxSizer(wx.VERTICAL)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.rootItemText, 0, wx.EXPAND, 0)
        sizer.Add((10,10))
        sizer.Add(self.mainsizer,0 ,wx.EXPAND, 0)
        self.mainsizer.Add(self.panel_main, 1,wx.EXPAND, 0)
        sizer.Add(self.panel_ex, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer)
        sizer.Layout()
        #self.mainsizer.Fit(self)
        #self.mainsizer.SetSizeHints(self)
        self.Layout()


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        """初始化控件
        """
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel = MyMTreePanel(self)
        self.panel.AddRoot("datasets")
        for i in range(2):
            self.panel.Insert(i,CheckItem(self.panel,'check'+str(i)))
        self.panel.RemoveAll()
        for i in range(4):
            self.panel.Insert(i,CheckItem(self.panel,'check'+str(i)))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        """设置窗口属性
        """
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((200,400))
        # end wxGlade

    def __do_layout(self):
        """设置窗口布局
        """
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.panel,1,wx.EXPAND,0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

# end of class MyFrame

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()

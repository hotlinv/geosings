#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.4.1 on Wed Apr 18 09:58:18 2007

import wx
from geosings.core.system import UseGetText
from geosings.ui.commondlg.ToolDlgTemplate import ToolDialog
from geosings.core.system.GssConfDict import GSSCONF
if GSSCONF["GSS_TOOLS_OPER"] is None : 
    import geosings.tools.ToolsSettings

def importModel(modname):
    """获取导入模块的Python表示字符串
    @type modname: str
    @param modname: 模块名
    @rtype: str
    @return: 导入模块的Python表示字符串
    """
    modstr = """
from geosings.tools import %s
    """
    return modstr % modname

def runModel(modname):
    """ 获取运行指定模块的Python表示字符串
    @type modname: str
    @param modname: 获取运行的指定模块的Python字符串
    @rtype: str
    @return: 运行模块的名称
    """
    modstr = """
%s.run()
    """ 
    return modstr % modname


class GTTreeCtrl(wx.TreeCtrl):
    def __init__(self, *args, **kwds):
        wx.TreeCtrl.__init__(self, *args, **kwds)
        self.root = self.AddRoot(_("LIN"))
        self.opermap = {}
        self.itemmap = {}
        self.SetConf()
        self.Expand(self.root)
        
        self.Bind(wx.EVT_LEFT_DCLICK, self.OnLeftDClick)

    def SetConf(self):
        #thisdir = GetThisDir(__file__)
        #file = open(os.path.join(thisdir,'tools.conf'))
        #fc = file.read()
        #file.close()
        #exec(fc)
        for d in GSSCONF["GSS_TOOLS_CONF"]:
            i = self.__AddItem(self.root,"",d)

    def OnLeftDClick(self,evt):
        filepath = self.__GetItemPath(self.GetSelection())
        if filepath in self.opermap:
            oper = self.opermap[filepath]
            mod = importModel(oper)
            exec "from geosings.tools.ui.%s import %s" % (oper,oper) 
            exec "operClass = %s" % oper
            dlg = ToolDialog([], operClass, [-1], None, -1, oper)
            ret = dlg.ShowModal()
        evt.Skip()

    def __GetItemPath(self,itemid):
        pathstr = [self.GetItemText(itemid)]
        rootid = self.GetRootItem()
        thisitemid = self.GetItemParent(itemid)
        while thisitemid != rootid:
            pathstr.insert(0,self.GetItemText(thisitemid))
            thisitemid = self.GetItemParent(thisitemid)
        return "/"+"/".join(pathstr)

    def __AddItem(self, parent, parentname, item):
        if type(item) == dict:
            key = item.keys()[0]
            nowname = parentname+"/"+_(key)
            i = self.AppendItem(parent, _(key))
            self.__AddItem(i, nowname, item[key])
        elif type(item) == list:
            for it in item:
                self.__AddItem(parent,parentname, it)
        else:
            self.opermap[parentname] = item

class GTTreePanel(wx.Panel):
    def __init__(self, *args, **kwds):
        wx.Panel.__init__(self, *args, **kwds)
        self.tree_ctrl_1 = GTTreeCtrl(self, -1, style=wx.TR_HAS_BUTTONS|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        sizer_3.Fit(self)
        sizer_3.SetSizeHints(self)
        self.Layout()
        
class GTFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetTitle(_("LIN"))

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        self.panel_1 = GTTreePanel(self, -1)
        self.panel_1.SetAutoLayout(True)
        sizer_2.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame

from geosings.core.system import GetThisDir
import os

if __name__ == "__main__":
    #thisdir = GetThisDir(__file__)
    #file = open(os.path.join(thisdir,'tools.conf'))
    #fc = file.read()
    #file.close()
    #exec(fc)

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = GTFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
